// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{

  // pos_cs_in = proj * view * model(is_moon, animation_seconds) * vec4(pos_vs_in,1.0);
  vec4 interp_pos = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);

  // 3D position _before_ applying model, view or projection transformations (e.g., point on unit sphere)
  sphere_fs_in = normalize(interp_pos.xyz);
  // view and model transformed 3D normal (need to use camera space normals)
  normal_fs_in = (view * model(is_moon, animation_seconds) * interp_pos).xyz;

  // view and model transformed 3D position
  view_pos_fs_in = view * model(is_moon, animation_seconds) * vec4(sphere_fs_in,1.0);
  // projected, view, and model transformed 3D position
  pos_fs_in = proj * view_pos_fs_in;

  gl_Position = pos_fs_in;

}


