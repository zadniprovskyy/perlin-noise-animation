// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform int planet_id;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
    vec3 ka = vec3(1,1,1);
    vec3 l = normalize(vec3( cos(M_PI*animation_seconds/3), 2, sin(M_PI*animation_seconds/3)));

    vec3 ks;

    if (planet_id == 0) {
        ks = vec3(0.5,0.5,0.5);
        float pixel_size = 0.125;

        float turbulence_pn = 0;
        float scale = 1;
        vec3 pos = sphere_fs_in;

        while (scale > pixel_size) {
            pos /= scale;
            turbulence_pn += perlin_noise(pos*5) * scale;
            scale /= 2;
        }

        float x =sin((sphere_fs_in.y + turbulence_pn*3 + animation_seconds / 2)*M_PI);
        x = sqrt(x+1)*.7071;;

        color.g = 0.3 + 0.8*x;
        x = sqrt(x);
        color.r = 0.3 + 0.6*x;
        color.b = 0.6 + 0.4*x;


    }
    else if (planet_id == 1) {
        ks = vec3(0.5,0.5,0.5);
        float pixel_size = 0.125;

        float turbulence_pn = 0;
        float scale = 1;
        vec3 pos = sphere_fs_in;

        while (scale > pixel_size) {
            pos /= scale;
            turbulence_pn += perlin_noise(pos*5) * scale;
            scale /= 2;
        }

        float x =sin((sphere_fs_in.y + turbulence_pn*3)*M_PI);
        x = sqrt(x+1)*.7071;;

        color.g = 0.3 + 0.8*x;
        x = sqrt(x);
        color.r = 0.3 + 0.6*x;
        color.b = 0.6 + 0.4*x;
    }
    else if (planet_id == 2) {
            ks = vec3(0.5,0.5,0.5);
            float pixel_size = 0.125;

            float turbulence_pn = 0;
            float scale = 1;
            vec3 pos = sphere_fs_in;

            while (scale > pixel_size) {
                pos /= scale;
                turbulence_pn += perlin_noise(pos*5) * scale;
                scale /= 2;
            }

            float x =sin((sphere_fs_in.y + turbulence_pn*3)*M_PI);
            x = sqrt(x+1)*.7071;;

            color.r = 0.3 + 0.8*x;
            x = sqrt(x);
            color.g = 0.3 + 0.6*x;
            color.b = 0.6 + 0.4*x;
    }

    color = blinn_phong(
            ka,
            color,
            ks,
            1000,
            normalize(sphere_fs_in),
            normalize(-view_pos_fs_in.xyz),
            l
        );
}
